#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Deklarasi variabel tambahan di bagian atas kode
boolean _gs232WActive = false;  // GS232 W command in process
int _gs232AzElIndex = 0;        // Position in GS232 Az-El sequence
long _azimuthTemp = 0L;         // Temporary azimuth value
long _elevationTemp = 0L;       // Temporary elevation value

 

// OLED Display Configuration
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels
#define OLED_RESET    -1  // Reset pin (not used with I2C)
#define SCREEN_ADDRESS 0x3C  // I2C address for the OLED display

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Adjustable Parameters
const long _azAdZeroOffset = 550;   // Adjust to zero out azimuth reading when control box az = 0
const long _elAdZeroOffset = 150;   // Adjust to zero out elevation reading when control box el = 0
const long _azScaleFactor = 220;    // Adjust as needed for azimuth scaling
const long _elScaleFactor = 568;    // Adjust as needed for elevation scaling

// Pins
const byte _azimuthInputPin = A0;   // Azimuth analog signal from G5500
const byte _elevationInputPin = A1; // Elevation analog signal from G5500
const byte _G5500UpPin = 4;        // Elevation rotor up control line
const byte _G5500DownPin = 5;      // Elevation rotor down control line
const byte _G5500LeftPin = 6;      // Azimuth rotor left control line
const byte _G5500RightPin = 7;     // Azimuth rotor right control line

long _closeEnough = 100;   // Tolerance for az-el match in degrees * 100

// Rotor parameters
const long _maxRotorAzimuth = 45000L;  // Maximum rotor azimuth in degrees * 100
const long _maxRotorElevation = 18000L; // Maximum rotor elevation in degrees * 100

long _rotorAzimuth = 0L;        // Current rotor azimuth
long _rotorElevation = 0L;      // Current rotor elevation
long _newAzimuth = 0L;          // Target azimuth
long _newElevation = 0L;        // Target elevation

boolean _azimuthMove = false;   // Azimuth movement required
boolean _elevationMove = false; // Elevation movement required

String azimuthread = "";        // Azimuth string for display
String elevasiread = "";        // Elevation string for display
String Addition = "+0";         // Fixed string addition for display

unsigned long _rtcLastRotorUpdate = 0UL;  // Last rotor update time
unsigned long _rotorMoveUpdateInterval = 100UL; // Rotor movement update interval in ms


//
// Opening Animation
//

//
// Setup function
//
void setup() {
  // Initialize rotor control pins as outputs
  pinMode(_G5500UpPin, OUTPUT);
  pinMode(_G5500DownPin, OUTPUT);
  pinMode(_G5500LeftPin, OUTPUT);
  pinMode(_G5500RightPin, OUTPUT);
  
  // Set all rotor control outputs low
  digitalWrite(_G5500UpPin, LOW);
  digitalWrite(_G5500DownPin, LOW);
  digitalWrite(_G5500LeftPin, LOW);
  digitalWrite(_G5500RightPin, LOW);

  // Initialize serial communication
  Serial.begin(9600);

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Loop forever if initialization fails
  }
  display.clearDisplay();
  display.display();

  // Initial rotor position
  readAzimuth();
  readElevation();
}

//
// Main loop
//
void loop() {
  // Check for serial data
  if (Serial.available() > 0) {
    decodeGS232(Serial.read());
  }

  unsigned long rtcCurrent = millis();

  // Update rotor movements periodically
  if (rtcCurrent - _rtcLastRotorUpdate > _rotorMoveUpdateInterval) {
    _rtcLastRotorUpdate = rtcCurrent;

    // Azimuth movement
    readAzimuth();
    if ((abs(_rotorAzimuth - _newAzimuth) > _closeEnough) && _azimuthMove) {
      updateAzimuthMove();
    } else {
      digitalWrite(_G5500LeftPin, LOW);
      digitalWrite(_G5500RightPin, LOW);
      _azimuthMove = false;
    }

    // Elevation movement
    readElevation();
    if ((abs(_rotorElevation - _newElevation) > _closeEnough) && _elevationMove) {
      updateElevationMove();
    } else {
      digitalWrite(_G5500UpPin, LOW);
      digitalWrite(_G5500DownPin, LOW);
      _elevationMove = false;
    }

    // Print azimuth and elevation to Serial
    Serial.println(Addition + azimuthread + Addition + elevasiread);

    // Update OLED display
    displayAzEl(azimuthread, elevasiread);
  }
}

//
// Update elevation rotor move
//
void updateElevationMove() {
  long rotorMoveEl = _newElevation - _rotorElevation;

  if (rotorMoveEl > 0) {
    digitalWrite(_G5500DownPin, LOW);
    digitalWrite(_G5500UpPin, HIGH);
  } else if (rotorMoveEl < 0) {
    digitalWrite(_G5500UpPin, LOW);
    digitalWrite(_G5500DownPin, HIGH);
  }
}

//
// Update azimuth rotor move
//
void updateAzimuthMove() {
  long rotorMoveAz = _newAzimuth - _rotorAzimuth;

  if (rotorMoveAz > 0) {
    digitalWrite(_G5500LeftPin, LOW);
    digitalWrite(_G5500RightPin, HIGH);
  } else if (rotorMoveAz < 0) {
    digitalWrite(_G5500RightPin, LOW);
    digitalWrite(_G5500LeftPin, HIGH);
  }
}

//
// Read azimuth from G5500
//
void readAzimuth() {
  long sensorValue = analogRead(_azimuthInputPin);
  _rotorAzimuth = ((sensorValue * 10000) / _azScaleFactor) - _azAdZeroOffset;
  azimuthread = String(round(_rotorAzimuth / 100));
  while (azimuthread.length() < 3) {
    azimuthread = "0" + azimuthread;
  }
}

//
// Read elevation from G5500
//
void readElevation() {
  long sensorValue = analogRead(_elevationInputPin);
  _rotorElevation = ((sensorValue * 10000) / _elScaleFactor) - _elAdZeroOffset;
  elevasiread = String(round(_rotorElevation / 100));
  while (elevasiread.length() < 3) {
    elevasiread = "0" + elevasiread;
  }
}

//
// Decode GS232 commands
//
void decodeGS232(char character) {
  switch (character) {
    case 'w': case 'W':
      _gs232WActive = true;
      _gs232AzElIndex = 0;
      break;

    case '0': case '1': case '2': case '3': case '4': 
    case '5': case '6': case '7': case '8': case '9':
      if (_gs232WActive) {
        processAzElNumeric(character);
      }
      break;

    default:
      break;
  }
}

//
// Process azimuth/elevation numeric characters
//
void processAzElNumeric(char character) {
  switch (_gs232AzElIndex) {
    case 0:
      _azimuthTemp = (character - '0') * 100;
      _gs232AzElIndex++;
      break;

    case 1:
      _azimuthTemp += (character - '0') * 10;
      _gs232AzElIndex++;
      break;

    case 2:
      _azimuthTemp += (character - '0');
      _gs232AzElIndex++;
      if ((_azimuthTemp * 100) > _maxRotorAzimuth) {
        _gs232WActive = false;
        _newAzimuth = 0L;
        _newElevation = 0L;
      }
      break;

    case 3:
      _elevationTemp = (character - '0') * 100;
      _gs232AzElIndex++;
      break;

    case 4:
      _elevationTemp += (character - '0') * 10;
      _gs232AzElIndex++;
      break;

    case 5:
      _elevationTemp += (character - '0');
      _gs232AzElIndex++;
      if ((_elevationTemp * 100) > _maxRotorElevation) {
        _gs232WActive = false;
        _newAzimuth = 0L;
        _newElevation = 0L;
      } else {
        _newAzimuth = _azimuthTemp * 100;
        _newElevation = _elevationTemp * 100;
        _azimuthMove = true;
        _elevationMove = true;
      }
      break;

    default:
      break;
  }
}

//
// Display azimuth and elevation on OLED
//
void displayAzEl(String az, String el) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
// Calculate center for "YC7OIZ"
  int16_t x1, y1;
  uint16_t width, height;
  display.getTextBounds("YC7OIZ", 0, 0, &x1, &y1, &width, &height);
  display.setCursor((SCREEN_WIDTH - width) / 2, 0);  // Center horizontally, set vertically at 10px
  display.print("YC7OIZ");

  // Calculate center for "Rotator Controller"
  display.getTextBounds("Rotator Controller", 0, 0, &x1, &y1, &width, &height);
  display.setCursor((SCREEN_WIDTH - width) / 2, 10);  // Center horizontally, set vertically at 40px
  display.print("Rotator Controller");
  // Display current azimuth and elevation
  display.setCursor(0, 20);
  display.print("Az: ");
  display.print(az);
  display.print(" | Target: ");

  display.setCursor(0, 40);
  display.print("El: ");
  display.print(el);
  display.print(" | Target: ");

   // Check if there is an active target for azimuth or elevation
  if (_azimuthMove || _elevationMove) {
    // Display target azimuth if movement is active
    display.setCursor(100, 20);
    if (_azimuthMove) {
      display.print(_newAzimuth / 100);  // Convert to degrees
    } else {
      display.print("---");
    }

    // Display target elevation if movement is active
    display.setCursor(100, 40);
    if (_elevationMove) {
      display.print(_newElevation / 100);  // Convert to degrees
    } else {
      display.print("---");
    }
  }

  

  display.display();
}
